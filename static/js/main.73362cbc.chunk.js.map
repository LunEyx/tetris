{"version":3,"sources":["Tile.js","Tetris.js","App.js","serviceWorker.js","index.js","Setting.js"],"names":["Tile","type","position","Object","classCallCheck","this","tile","tiles","color","colors","getInitialPosition","rotation","clone","slice","Math","floor","length","test","_this","wallKick","offset","rotationClockwisePosition","clockwiseWallKickI","clockwiseWallKick","map","column","index","reverse","row","_this2","antiClockwiseWallKickI","antiClockwiseWallKick","Tetris","props","possibleConstructorReturn","getPrototypeOf","call","initializeGame","shadow","keyPressing","Set","canSpawn","iteration","shouldFastForward","shouldDown","shouldLeft","shouldRight","shouldRotateClockwise","shouldRotateAntiClockwise","lastArrowKey","resume","pause","setState","gameState","clearTimeout","updateTimer","setTimeout","loop","updateInterval","restart","_this$props","height","width","board","Array","i","fill","next","push","random","spawn","debug","console","log","fastForward","autoDownInterval","down","left","right","rotateClockwise","rotateAntiClockwise","state","lockTimer","getNextTileType","checkCanPlace","placeTile","handleKeyDown","event","has","key","add","handleKeyUp","delete","includes","newTile","lock","lockInterval","clearRow","y","every","x","s","checkInBoard","_tile$position","slicedToArray","nextTile","prevTile","placeShadow","newShadow","check","newNext","shift","createBoard","_this$props2","table","_loop","j","_loop2","react_default","a","createElement","className","createNext","displayText","onDisplayClick","arrayClone","arr","newArr","from","_this$props3","focus","border","onClick","id","onKeyDown","onKeyUp","tabIndex","ref","React","Component","App","src_Tetris_0","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","exports"],"mappings":"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","file":"static/js/main.73362cbc.chunk.js","sourcesContent":["class Tile {\n  constructor(type, position) {\n    this.type = type;\n    this.tile = Tile.tiles[type];\n    this.color = Tile.colors[type];\n    this.position = position || this.getInitialPosition();\n    this.rotation = 0;\n  }\n\n  clone() {\n    let clone = new Tile(this.type, this.position);\n    clone.tile = this.tile;\n    clone.position = this.position.slice();\n    clone.rotation = this.rotation;\n\n    return clone;\n  }\n\n  getInitialPosition() {\n    return [Math.floor((10 - this.tile[0].length) / 2), this.type === 5 ? 1 : 0];\n  }\n\n  rotateClockwise(test) {\n    this.rotation = (this.rotation + 1) % 4;\n    let offset = Tile.rotationClockwisePosition[this.type][this.rotation];\n    let wallKick;\n    if (this.type === 5)\n      wallKick = Tile.clockwiseWallKickI[this.rotation][test];\n    else\n      wallKick = Tile.clockwiseWallKick[this.rotation][test];\n    this.position[0] += offset[0] + wallKick[0];\n    this.position[1] += offset[1] + wallKick[1];\n    this.tile = this.tile[0].map((column, index) => this.tile.slice().reverse().map((row) => row[index]));\n\n    return this;\n  }\n\n  rotateAntiClockwise(test) {\n    this.rotation = (this.rotation + 3) % 4;\n    let offset = Tile.rotationClockwisePosition[this.type][(this.rotation+1)%4];\n    let wallKick;\n    if (this.type === 5)\n      wallKick = Tile.antiClockwiseWallKickI[this.rotation][test];\n    else\n      wallKick = Tile.antiClockwiseWallKick[this.rotation][test];\n    this.position[0] -= offset[0] - wallKick[0];\n    this.position[1] -= offset[1] - wallKick[1];\n    this.tile = this.tile[0].map((column, index) => this.tile.map((row) => row[row.length - index - 1]));\n\n    return this;\n  }\n}\n\nTile.tiles = [ [ [1, 1, 0], [0, 1, 1] ], [ [0, 0, 1], [1, 1, 1] ], [ [1, 1], [1, 1] ], [ [0, 1, 1], [1, 1, 0] ], [ [1, 0, 0], [1, 1, 1] ], [ [1, 1, 1, 1] ], [ [0, 1, 0], [1, 1, 1] ], ];\n\nTile.colors = ['red', 'orange', 'yellow', 'green', 'blue', 'cyan', 'purple', 'grey'];\n\nTile.rotationClockwisePosition = [\n  [ [0, 0], [1, 0], [-1, 1], [0, -1] ],\n  [ [0, 0], [1, 0], [-1, 1], [0, -1] ],\n  [ [0, 0], [0, 0], [0, 0], [0, 0] ],\n  [ [0, 0], [1, 0], [-1, 1], [0, -1] ],\n  [ [0, 0], [1, 0], [-1, 1], [0, -1] ],\n  [ [-1, 1], [2, -1], [-2, 2], [1, -2] ],\n  [ [0, 0], [1, 0], [-1, 1], [0, -1] ]\n];\n\nTile.clockwiseWallKick = [\n[ [ 0, 0], [-1, 0], [-1,-1], [ 0, 2], [-1, 2] ],\n[ [ 0, 0], [-1, 0], [-1, 1], [ 0,-2], [-1,-2] ],\n[ [ 0, 0], [ 1, 0], [ 1,-1], [ 0, 2], [ 1, 2] ],\n[ [ 0, 0], [ 1, 0], [ 1, 1], [ 0,-2], [ 1,-2] ]\n];\n\nTile.antiClockwiseWallKick = [\n[ [ 0, 0], [ 1, 0],\t[ 1,-1], [ 0, 2],\t[ 1, 2] ],\n[ [ 0, 0], [-1, 0],\t[-1, 1], [ 0,-2],\t[-1,-2] ],\n[ [ 0, 0], [-1, 0],\t[-1,-1], [ 0, 2],\t[-1, 2] ],\n[ [ 0, 0], [ 1, 0],\t[ 1, 1], [ 0,-2],\t[ 1,-2] ]\n];\n\nTile.clockwiseWallKickI = [\n[ [ 0, 0], [ 1, 0], [-2, 0], [ 1,-2], [-2, 1] ],\n[ [ 0, 0], [-2, 0], [ 1, 0], [-2,-1], [ 1, 2] ],\n[ [ 0, 0], [-1, 0], [ 2, 0], [-1, 2], [ 2,-1] ],\n[ [ 0, 0], [ 2, 0], [-1, 0], [ 2, 1], [-1,-2] ]\n];\n\nTile.antiClockwiseWallKickI = [\n[ [ 0, 0], [ 2, 0], [-1, 0], [ 2, 1], [-1,-2] ],\n[ [ 0, 0], [ 1, 0], [-2, 0], [ 1,-2], [-2, 1] ],\n[ [ 0, 0], [-2, 0], [ 1, 0], [-2,-1], [ 1, 2] ],\n[ [ 0, 0], [-1, 0], [ 2, 0], [-1, 2], [ 2,-1] ]\n];\n\nexport default Tile;\n","import React from 'react';\nimport './Tetris.css';\n\nimport Tile from './Tile.js';\n\nclass Tetris extends React.Component {\n  constructor(props) {\n    super(props);\n\n    const {map, height, width} = this.props;\n    let board = new Array(height+1);\n    for (let i = 0; i < board.length; i++) {\n      board[i] = (new Array(width)).fill(-1);\n    }\n\n    let next = [];\n    for (let i = 0; i < 5; i++) {\n      next.push(Math.floor(Math.random() * 7));\n    }\n\n    this.state = {\n      gameState: 'start',\n      board: map || board,\n      next: next\n    };\n\n    this.tiles = Tile.tiles;\n    this.colors = Tile.colors;\n\n    this.updateInterval = 100;\n    this.autoDownInterval = 1000 / this.updateInterval;\n    this.lockInterval = 1000;\n    this.debug = false;\n  }\n\n  componentDidUpdate() {\n    this.table.focus();\n  }\n\n  initializeGame = () => {\n    this.tile = null;\n    this.shadow = null;\n\n    this.keyPressing = this.keyPressing || new Set();\n\n    this.canSpawn = true;\n    // TODO: this.canStore = true;\n    // TODO: this.storage = null;\n    this.iteration = 0;\n\n    this.shouldFastForward = false;\n    this.shouldDown = false;\n    this.shouldLeft = false;\n    this.shouldRight = false;\n    this.shouldRotateClockwise = false;\n    this.shouldRotateAntiClockwise = false;\n    this.lastArrowKey = '';\n    this.resume();\n  }\n\n  pause = () => {\n    this.shouldFastForward = false;\n    this.shouldDown = false;\n    this.shouldLeft = false;\n    this.shouldRight = false;\n    this.shouldRotateClockwise = false;\n    this.shouldRotateAntiClockwise = false;\n    this.setState({ gameState: 'pause' });\n    clearTimeout(this.updateTimer);\n  }\n\n  resume = () => {\n    this.setState({ gameState: 'play' });\n    this.updateTimer = setTimeout(this.loop, this.updateInterval);\n  }\n\n  restart = () => {\n    const {map, height, width} = this.props;\n    let board = new Array(height+1);\n    for (let i = 0; i < board.length; i++) {\n      board[i] = (new Array(width)).fill(-1);\n    }\n\n    let next = [];\n    for (let i = 0; i < 5; i++) {\n      next.push(Math.floor(Math.random() * 7));\n    }\n\n    this.setState({\n      board: map || board,\n      next: next\n    });\n    this.initializeGame();\n  }\n\n  loop = () => {\n    if (this.canSpawn) {\n      this.spawn();\n    } else if (this.tile) {\n      if (this.shouldFastForward) {\n        if (this.debug) console.log('shouldFastForward');\n        this.fastForward();\n      } else {\n        if (this.iteration === this.autoDownInterval) {\n          if (this.debug) console.log('autoDown');\n          this.down();\n          this.iteration = 0;\n        }\n        if (this.shouldDown) {\n          this.down();\n        }\n        if (this.shouldLeft || this.lastArrowKey === 'ArrowLeft') {\n          this.left();\n          this.shouldLeft = false;\n        } else if (this.shouldRight || this.lastArrowKey === 'ArrowRight') {\n          this.right();\n          this.shouldRight = false;\n        }\n        if (this.shouldRotateClockwise) {\n          this.rotateClockwise();\n          this.shouldRotateClockwise = false;\n        }\n        if (this.shouldRotateAntiClockwise) {\n          this.rotateAntiClockwise();\n          this.shouldRotateAntiClockwise = false;\n        }\n\n        this.iteration += 1;\n      }\n      this.shouldFastForward = false;\n    }\n    if (this.state.gameState === 'play')\n      this.updateTimer = setTimeout(this.loop, this.updateInterval);\n  }\n\n  spawn = () => {\n    if (this.debug) console.log('spawn');\n    // Turn off Spawn\n    this.canSpawn = false;\n    // Reset Lock Timer\n    this.lockTimer = null;\n\n    // Initialize the new tile\n    this.tile = new Tile(this.getNextTileType());\n\n    // Check and Place the new tile\n    let board = this.state.board.map(row => row.slice());\n    if (this.checkCanPlace(board, this.tile, true)) {\n      this.placeTile(board, this.tile);\n    } else {\n      this.setState({\n        gameState: 'gameover'\n      });\n    }\n  }\n\n  handleKeyDown = (event) => {\n    if (this.state.gameState === 'start') {\n      this.initializeGame();\n    } else if (this.state.gameState === 'play') {\n      if (!this.keyPressing.has(event.key)) {\n        if (event.key === 'Escape') {\n          this.pause();\n        } else if (event.key === ' ') {\n          this.shouldFastForward = true;\n        } else if (event.key === 'ArrowLeft') {\n          this.shouldLeft = true;\n          this.lastArrowKey = 'ArrowLeft';\n        } else if (event.key === 'ArrowRight') {\n          this.shouldRight = true;\n          this.lastArrowKey = 'ArrowRight';\n        } else if (event.key === 'ArrowDown') {\n          this.shouldDown = true;\n        } else if (event.key === 'ArrowUp') {\n          this.shouldRotateClockwise = true;\n        } else if (event.key === 'z') {\n          this.shouldRotateAntiClockwise = true;\n        }\n        this.keyPressing.add(event.key);\n      }\n    } else if (this.state.gameState === 'pause') {\n      if (!this.keyPressing.has(event.key)) {\n        if (event.key === 'Escape') {\n          this.resume();\n        }\n      }\n    } else if (this.state.gameState === 'gameover') {\n      if (!this.keyPressing.has(event.key)) {\n        if (event.key === 'Enter') {\n          this.restart();\n        }\n      }\n    }\n  }\n\n  handleKeyUp = (event) => {\n    this.keyPressing.delete(event.key);\n    if (['ArrowLeft', 'ArrowRight'].includes(event.key)) {\n      this.lastArrowKey = this.keyPressing.has('ArrowLeft') ? 'ArrowLeft' : this.keyPressing.has('ArrowRight') ? 'ArrowRight' : '';\n    }\n    if (event.key === 'ArrowDown')\n      this.shouldDown = false;\n  }\n\n  fastForward = () => {\n    if (this.debug) console.log('fastForward');\n\n    let board = this.state.board.map(row => row.slice());\n    let newTile = this.tile.clone();\n    newTile.position[1] += 1;\n    while (this.checkCanPlace(board, newTile)) {\n      newTile.position[1] += 1;\n    }\n    newTile.position[1] -= 1;\n    this.placeTile(board, newTile);\n    this.lock();\n  }\n\n  down = () => {\n    if (this.debug) console.log('down');\n\n    let board = this.state.board.map(row => row.slice());\n    let newTile = this.tile.clone();\n    newTile.position[1] += 1;\n    if (this.checkCanPlace(board, newTile)) {\n      clearTimeout(this.lockTimer);\n      this.lockTimer = null;\n      this.placeTile(board, newTile);\n      board = this.state.board.map(row => row.slice());\n      newTile = this.tile.clone();\n      newTile.position[1] += 1;\n      if (!this.checkCanPlace(board, newTile)) {\n        this.lockTimer = setTimeout(this.lock, this.lockInterval);\n      }\n    } else if (!this.lockTimer) {\n      this.lockTimer = setTimeout(this.lock, this.lockInterval);\n    }\n  }\n\n  left = () => {\n    if (this.debug) console.log('left');\n\n    let board = this.state.board.map(row => row.slice());\n    let newTile = this.tile.clone();\n    newTile.position[0] -= 1;\n    if (this.checkCanPlace(board, newTile)) {\n      this.placeTile(board, newTile);\n    }\n  }\n\n  right = () => {\n    if (this.debug) console.log('right');\n\n    let board = this.state.board.map(row => row.slice());\n    let newTile = this.tile.clone();\n    newTile.position[0] += 1;\n    if (this.checkCanPlace(board, newTile)) {\n      this.placeTile(board, newTile);\n    }\n  }\n\n  rotateClockwise = () => {\n    if (this.debug) console.log('rotateClockwise');\n\n    let board = this.state.board.map(row => row.slice());\n    for (let i = 0; i < 5; i++) {\n      let newTile = this.tile.clone();\n      newTile.rotateClockwise(i);\n      if (this.checkCanPlace(board, newTile)) {\n        this.placeTile(board, newTile);\n        break;\n      }\n    }\n  }\n\n  rotateAntiClockwise = () => {\n    if (this.debug) console.log('rotateAntiClockwise');\n\n    let board = this.state.board.map(row => row.slice());\n    for (let i = 0; i < 5; i++) {\n      let newTile = this.tile.clone();\n      newTile.rotateAntiClockwise(i);\n      if (this.checkCanPlace(board, newTile)) {\n        this.placeTile(board, newTile);\n        break;\n      }\n    }\n  }\n\n  lock = () => {\n    if (this.debug) console.log('lock');\n\n    clearTimeout(this.lockTimer);\n\n    let board = this.state.board.map(row => row.slice());\n    let newTile = this.tile.clone();\n    newTile.position[1] += 1;\n    if (this.checkCanPlace(board, newTile)) {\n      console.log('can place????');\n      return;\n    }\n    // Clear row if any\n    this.clearRow();\n\n    this.tile = null;\n\n    // Unblock spawn\n    this.canSpawn = true;\n  }\n\n  clearRow = () => {\n    if (this.debug) console.log('clearRow');\n\n    let tile = this.tile.tile;\n    let position = this.tile.position;\n\n    let board = this.state.board.map(row => row.slice());\n    for (let y = position[1]; y < position[1]+tile.length; y++) {\n      if (board[y].every(x => x > -1)) {\n        for (let s = y; s > 0; s--) {\n          board[s] = board[s-1];\n        }\n      }\n    }\n\n    this.setState({\n      board: board\n    });\n  }\n\n  checkInBoard = (board, tile) => {\n    let [x, y] = tile.position;\n\n    return x >= 0 && x + tile.tile[0].length <= board[0].length && y >= 0 && y + tile.tile.length <= board.length;\n  }\n\n  checkCanPlace = (board, nextTile, spawn) => {\n    if (this.debug) console.log('checkCanPlace');\n    let prevTile = this.tile;\n    if (!this.checkInBoard(board, prevTile)) return false;\n    if (!this.checkInBoard(board, nextTile)) return false;\n\n    let tile = prevTile.tile;\n    let position = prevTile.position;\n    if (!spawn) {\n      for (let y = 0; y < tile.length; y++) {\n        for (let x = 0; x < tile[0].length; x++) {\n          if (tile[y][x] === 1)\n            board[y+position[1]][x+position[0]] = -1;\n        }\n      }\n    }\n\n    tile = nextTile.tile;\n    position = nextTile.position;\n    for (let y = 0; y < tile.length; y++) {\n      for (let x = 0; x < tile[0].length; x++) {\n        if (tile[y][x] === 1 && board[y+position[1]][x+position[0]] > -1)\n          return false;\n      }\n    }\n\n    return true;\n  }\n\n  placeShadow = (board, newTile) => {\n    if (this.shadow) {\n      let tile = this.shadow.tile;\n      let position = this.shadow.position;\n      for (let y = 0; y < tile.length; y++) {\n        for (let x = 0; x < tile[0].length; x++) {\n          if (tile[y][x] === 1 && board[y+position[1]][x+position[0]] === -2)\n            board[y+position[1]][x+position[0]] = -1;\n        }\n      }\n    }\n\n    let newShadow = newTile.clone();\n    let tile = newShadow.tile;\n    let position = newShadow.position;\n    for (let height = tile.length-1+position[1]; height < board.length; height++) {\n      let check = true;\n      for (let y = tile.length-1; check && y >= 0; y--) {\n        for (let x = 0; check && x < tile[0].length; x++) {\n          if (tile[y][x] === 1 && board[y+position[1]][x+position[0]] > -1) {\n            check = false;\n          }\n        }\n      }\n      if (!check) break;\n      newShadow.position[1] += 1;\n    }\n    newShadow.position[1] -= 1;\n\n    this.shadow = newShadow;\n    tile = this.shadow.tile;\n    position = this.shadow.position;\n    for (let y = 0; y < tile.length; y++) {\n      for (let x = 0; x < tile[0].length; x++) {\n        if (tile[y][x])\n          board[y+position[1]][x+position[0]] = -2;\n      }\n    }\n  }\n\n  placeTile = (board, newTile) => {\n    if (this.debug) console.log('placeTile');\n    let tile = this.tile.tile;\n    let position = this.tile.position;\n    for (let y = 0; y < tile.length; y++) {\n      for (let x = 0; x < tile[0].length; x++) {\n        if (tile[y][x] === 1)\n          board[y+position[1]][x+position[0]] = -1;\n      }\n    }\n\n    this.placeShadow(board, newTile);\n\n    this.tile = newTile;\n    tile = this.tile.tile;\n    position = this.tile.position;\n    for (let y = 0; y < tile.length; y++) {\n      for (let x = 0; x < tile[0].length; x++) {\n        if (tile[y][x] === 1)\n          board[y+position[1]][x+position[0]] = this.tile.type;\n      }\n    }\n\n    this.setState({\n      board: board\n    });\n  }\n\n  getNextTileType = () => {\n    const next = this.state.next[0];\n\n    const newNext = Math.floor(Math.random() * 7);\n\n    this.setState((state) => {\n      state.next.shift();\n      state.next.push(newNext);\n      return { next: state.next };\n    });\n\n    return next;\n  }\n\n  createBoard = () => {\n    const board = this.state.board;\n    const {height, width} = this.props;\n    let table = [];\n\n    for (let j = 1; j < height+1; j++) {\n      let row = [];\n\n      for (let i = 0; i < width; i++) {\n        row.push(<td key={j*width+i} className={(() => {const color = board[j][i]; return color === -2 ? this.colors[7] : this.colors[board[j][i]]})()}></td>);\n      }\n\n      table.push(<tr key={j}>{row}</tr>);\n    }\n\n    return <tbody>{table}</tbody>;\n  }\n\n  createNext = (i) => {\n    const type = this.state.next[i];\n\n    let table = [];\n\n    for (let j = 0; j < 4; j++) {\n      let row = [];\n\n      for (let i = 0; i < 4; i++) {\n        row.push(<td key={j*3+i} className={this.colors[type]}></td>);\n      }\n\n      table.push(<tr key={j}>{row}</tr>);\n    }\n\n    return <tbody>{table}</tbody>;\n  }\n\n  displayText = () => {\n    switch (this.state.gameState) {\n      case 'start':\n        return 'START';\n      case 'pause':\n        return 'PAUSE';\n      case 'gameover':\n        return 'GAME OVER';\n      default:\n        return '';\n    }\n  }\n\n  onDisplayClick = () => {\n    if (this.state.gameState === 'start') {\n      this.initializeGame();\n    } else if (this.state.gameState === 'pause') {\n      this.resume();\n    } else if (this.state.gameState === 'gameover') {\n      this.restart();\n    }\n  }\n\n  arrayClone = (arr) => {\n    let newArr = new Array(arr.length);\n    for (let i = 0; i < newArr.length; i++) {\n      newArr[i] = Array.from(arr[i]);\n    }\n\n    return newArr;\n  }\n\n  render() {\n    return (\n      <div>\n        <table border={1}>\n          <tbody>\n            <tr>\n              <td>\n                <div\n                  className={this.state.gameState}\n                  onClick={this.onDisplayClick}\n                >\n                  {this.displayText()}\n                </div>\n                <table\n                  id='board'\n                  onKeyDown={this.handleKeyDown}\n                  onKeyUp={this.handleKeyUp}\n                  tabIndex=\"0\"\n                  ref={table => this.table = table}\n                >\n                  {this.createBoard()}\n                </table>\n              </td>\n              <td id='tetris-next'>\n                {this.createNext(0)}\n                {this.createNext(1)}\n                {this.createNext(2)}\n                {this.createNext(3)}\n                {this.createNext(4)}\n              </td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    );\n  }\n}\n\nexport default Tetris;\n","import React from 'react';\nimport { height, width } from './Setting.js';\nimport Tetris from './Tetris.js';\nimport './App.css';\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div\n        id=\"Tetris\"\n      >\n        <Tetris\n          height={height}\n          width={width}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","exports.height = 20;\nexports.width = 10;\n"],"sourceRoot":""}